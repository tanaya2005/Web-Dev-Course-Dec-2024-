copied all the files from 1.setting up node except this notes ofc.

ROUTING BY EXPRESS INSTEAD OF NODE:
in terminal:
npm i express
npm i ejs

express is like a tooolbox, we use to create a server

bts, express also uses http only like node, bass usme we dont need to write alag se http and all in the code

rendering html files with EXPRESS 
step1: setup a view engine (bug, ejs, jade) but we use 'ejs'
step-2: make a views folder in your main folder. then index.ejs in views, 
{index.ejs is a html kinda file jisme we execute html ka code only.. but in express framework}
step3: istead of res.send, we use res,render in express
app.get('/', (req, res)=>{
    res.render('index')
}) 


MIDDLEWARE: koi bhi req jab jatay, toh uska response milne se pehle jo cheeze we wanna show, are in middleware (mostly "loading" sites kinda are middlewares ig) except only, console ka "loadinggggg" comes in our terminal only and not on screen. res.send me whatever we write, shows on the screen baadme
app.use((req, res, next)=>{
    console.log("loadinggggg")
    res.send("this is middleware")
})

just, res.send ki jagah if we use "return next()", toh reload karne pe the site runs index,ejs ka code 

TYPES OF MIDDLEWARE: 
1. built-in MW: like in express
2. custom MW: the one we make like above one
3. 3rd-party MW
-all types of middleware run for all routes in our website 

3rd- party middlewares are downloaded from the npm website and then used in code
go to npmjs.com and search "morgan" and then paste "npm i morgan" in the terminal
morgan=logger; tells us which req, when, time taken, which method etc about a request
then paste the API code in app.js: const morgan=require ('morgan')
and then write: app.use(morgan('dev'))
then npx nodemon app.js gives us (GET / 304 49.844 ms - -) details like these in the terminal 

to make cutsom middleware for a particular route: (/about)

the next() function helps us to move to the main function (req,res=>{}) wala code AFTER PASSING THROUGH THE MIDDLEWARE




vid timing- 58:00
CREATING FORMS

we create a form asking for email, name and password on the / page.. but ye  data store karne ke liye and server ko bhejne ke liye humne koi route hi nai banaya... so now we do that..

in app.js:
app.get('/get-form-data', (req, res)=>{
    console.log(req.query)
    res.send('data recieved')
})

jo bhi data aane wala hai vo req.query me aayega and res.send is the response we show on the website after submitting the form...

and then <form action="/get-form-data'> in index.ejs... toh sara data entered into the form, goes to the /get-form-data route and gets printed on the console. 
but data recieved wale page pe, we get the url as what data is recieved:
http://localhost:3000/get-form-data?username=txnayaaa&contact=3345677889&email=jaintanaya2012%40gmail.com&password=333333
isme password bhi dikhtay frontend pe is the major issue... toh ye sab nikalne ke liye, we do : app.get ki jagah app.post.... post is a method to send data from frontend to backend while get is used to take data server se frontend tak.. (ulte routes dono)

but agar now we're using post, toh data query me nahi aata, data aata hai req.body me....

app.post('/get-form-data', (req, res)=>{
    console.log(req.body)
    res.send('Data Recieved')
})

now we get "Cannot GET /get-form-data" after submitting coz we used post instead of get... and koi bhi form submit hone pe "get" ko hi hit kartay... so ye default setting hatane ke liye we use method="post" in the form tag in index.ejs
    <form action="/get-form-data" method="post">

ab terminal pe we get "undefined" coz express cant read the body ke andar ka data as default, so we use 2 BUILT-IN middlewares is kaam ke liye:
app.use(express.json())
and
app.use(express.urlencoded({extended:true}))
now we can get our data in req.body and in console too


vid- 1:10:00
LINKING CSS  TO THE frontend

make a folder named "public" and jo bhi files we need on the frontend, we make them in this folder
so we make index.css for index.ejs
static files-user can access in frontend from the server w/o any authentication. A built-in middleware function is express.static("<name of folder,here public>")


LINKING JS FILE:
public me make index.js
then we link js file like we link it normally in html, using script tag at the end of body 
 <script src="index.js"></script>
 agar public me assets karke folder hota and usme we had our index.js, toh we woud have written 
  <script src="/assets/index.js"></script>


 vid- 1:15:30
 MONGODB
 now install mongodb and compass me jaake see if db connects to server

 then in the terminal, npm i mongoose

 then we make a folder models and usme ek user.js file jisme we define & store the schema
in app.js to connects:
 const userModel=require('./models/user')

ab database se conn karne ke liye we make a config folder and a  file db.js in it. 
(db.js and user.js
ke saare lines are important so refer that only) 

in app.js:
const userModel=require('./models/user')
const dbConnection=require('./config/db')

db is connected if and only if we get "connected to the database" in our console


1:34:50 Taking input from the frontend and storing in database
create a register.ejs for taking the form input, method=post
<form action="/register" method="post">

then in app.js:
app.get('/register',(req,res)=>{
    res.render('register')
}) //ye method form ko frontend pe show karega
app.post('/register', (req,res)=>{
    console.log(req.body)
    res.send('User registered!')
}) // ye method actually user ko create karega db me

but since we did console and we get body me data and it prints in console, but we want it in the table in mongodb. so we remove the data from the body using
 const {username,email,password}=req.body
 this method is called destructuring ... toh body me jo bhi properties in req.body, variable ke form me username, email, password ke andar aa jatiye automatically
 app.get('/register',async (req,res)=>{
    res.render('register')
}) //ye method form ko frontend pe show karega
app.post('/register', (req,res)=>{    const {username,email,password}=req.body

await userModel.create({
    username: username,
    email: email,
    password: password
})
    res.send('User registered!')
}) 

adding async and await helps us hold on to that userModel.create line until and unless mera user create nahi ho jata... tab tak "user registered" print nai hogaaa

also, if we want ki jo data db me jaray vo display bhi ho,  toh we can use const newuser= await userModel..... and then res.send(newuser)

now try and enter things in the localhost and reload the  mongodb to see user added in the table with details... printing those on res.send, we get :
{
  "username": "ff",
  "email": "e@f",
  "password": "ee",
  "_id": "67a26cc7dfa1d5cfd07fc626",
  "__v": 0
}
the id and __v here are created auto by mongoose package. id for unique identification of the user incase baaki details same ho.. and __v tells us the version- ki user kitni baar update hua hai  

Create, Read, update delete- CRUD 

vid- 1:45:20
to READ the data inputs from db
we do:
app.get('/get-user-data', (req, res)=>{
    userModel.find().then((users)=>{
        res.send(users)
    })
})
the find() method finds db me se saare db ka users and brings them to us.
FILTERING DATA ON FRONTEND: 
find me we can also add a specific condition to filter users.. like specific username=dd
app.get('/get-users', (req, res)=>{
    userModel.find({
        username: 'dd'
    }).then((users)=>{
        res.send(users)
    })
})


THE findOne() method:
hamesha ek hi user return karega bhale hi us condition ko match karne wale multiple users ho.
app.get('/get-users',  (req, res)=>{
    userModel.findOne({
        username:'ff'
    }).then((user)=>{
        res.send(user)
    })
})


UPDATE: findOneAndUpdate() method finds the user with username and password and updates their email-id:
app.get('/update-user', async (req, res)=>{
  await  userModel.findOneAndUpdate({
        username: 'dd',
        password:'red'
    }, {
        email: 'd&d'
    })

    res.send('user updated')
})


DELETE:
 app.get('/delete-user', async (req,res)=>{
    await userModel.findOneAndDelete({
        username: 'ff'
    })

    res.send('User Deleted')
})
and the user with username ff gets deleted!!!ezypeasyyy

2:00:00
THE GOOGLE DRIVE PROJECT IN LEARNING PROJECTS FOLDER on desktop


AUTHENTICATION of user 
we use JWT-json web token and bcryrpt for it